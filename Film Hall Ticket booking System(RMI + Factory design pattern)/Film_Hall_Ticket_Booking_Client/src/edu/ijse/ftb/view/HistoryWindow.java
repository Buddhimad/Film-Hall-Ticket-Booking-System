/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.ftb.view;

import edu.ijse.ftb.connector.ServerConnector;
import edu.ijse.ftb.controller.CustomerController;
import edu.ijse.ftb.controller.MovieController;
import edu.ijse.ftb.controller.ReservationController;
import edu.ijse.ftb.dto.CustomerDTO;
import edu.ijse.ftb.dto.ReservationDTO;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class HistoryWindow extends javax.swing.JInternalFrame {

    /**
     * Creates new form HistoryWindow
     */
    public HistoryWindow() {
        initComponents();
        historyShow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtY = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnFind = new javax.swing.JButton();
        txtDate = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        findName = new javax.swing.JButton();

        setClosable(true);
        setForeground(new java.awt.Color(204, 204, 255));
        setIconifiable(true);
        setTitle("History");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(102, 153, 255)));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, null, new java.awt.Color(102, 153, 255)));

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Movie", "Show Time", "Show Date", "Reserve Time", "Reserve Date", "No Of Seats", "Phone Number", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHistory);
        if (tblHistory.getColumnModel().getColumnCount() > 0) {
            tblHistory.getColumnModel().getColumn(6).setMinWidth(50);
            tblHistory.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1047, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 153, 255), new java.awt.Color(102, 153, 255)));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Year   :");

        jLabel4.setText("Date   :");

        btnFind.setBackground(new java.awt.Color(255, 255, 255));
        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        try {
            txtDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Customer Name   :");

        findName.setBackground(new java.awt.Color(255, 255, 255));
        findName.setText("Find");
        findName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(txtY, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFind)
                        .addComponent(jLabel2)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(findName))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        searchReservationByYear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        dateHistoryFinder();
    }//GEN-LAST:event_btnFindActionPerformed

    private void findNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findNameActionPerformed
        searchByName();
    }//GEN-LAST:event_findNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JButton findName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHistory;
    private javax.swing.JFormattedTextField txtDate;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtY;
    // End of variables declaration//GEN-END:variables

    private void historyShow() {
        try {
            CustomerController cc = ServerConnector.getServerConnector().getCustomerController();
            ReservationController rc = ServerConnector.getServerConnector().getReservationController();
            MovieController mc = ServerConnector.getServerConnector().getMovieController();
            List<CustomerDTO> customerlist = cc.getAll();
            List<ReservationDTO> reservationlist = rc.getAll();
            DefaultTableModel dtm = (DefaultTableModel) tblHistory.getModel();
            dtm.setRowCount(0);
            for (ReservationDTO cd : reservationlist) {
                String custname = cc.search(cd.getCid()).getName();
                String moviename = mc.search(cd.getMoid()).getName();
                int phonenumber = cc.search(cd.getCid()).getMobnum();
                String mail = cc.search(cd.getCid()).getEmail();
                Object[] rows = {custname, moviename, cd.getMtime(), cd.getMdate(), cd.getRtime(), cd.getRdate(), cd.getSeatQ(), phonenumber, mail};
                dtm.addRow(rows);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
//     public void searchProcess(){
//         if(jcbYear.isSelected()||!jcbMonth.isSelected()||!jcbDay.isSelected()){
//             txtY.setEnabled(true);
//             txtM.setEnabled(false);
//             txtD.setEnabled(false);
//         }else if(!jcbYear.isSelected()||jcbMonth.isSelected()||!jcbDay.isSelected()){
//             txtY.setEnabled(false);
//             txtM.setEnabled(true);
//             txtD.setEnabled(false);
//         }else if(!jcbYear.isSelected()||!jcbMonth.isSelected()||jcbDay.isSelected()){
//             txtY.setEnabled(false);
//             txtM.setEnabled(false);
//             txtD.setEnabled(true);
//         }else if(jcbYear.isSelected()||jcbMonth.isSelected()||jcbDay.isSelected()){
//             txtY.setEnabled(true);
//             txtM.setEnabled(true);
//             txtD.setEnabled(true);
//         }else{
//              txtY.setEnabled(false);
//             txtM.setEnabled(false);
//             txtD.setEnabled(false);
//         }
////         jcbYear.setSelected(isIcon);
//      }

    public void searchReservationByYear() {
        try {
            CustomerController cc = ServerConnector.getServerConnector().getCustomerController();
            ReservationController rc = ServerConnector.getServerConnector().getReservationController();
            MovieController mc = ServerConnector.getServerConnector().getMovieController();
            List<CustomerDTO> customerlist = cc.getAll();
            List<ReservationDTO> reservationlist = rc.getAll();
            DefaultTableModel dtm = (DefaultTableModel) tblHistory.getModel();
            dtm.setRowCount(0);

            String searchingYear = txtY.getText();

            for (ReservationDTO cd : reservationlist) {
                String custname = cc.search(cd.getCid()).getName();
                String moviename = mc.search(cd.getMoid()).getName();
                int phonenumber = cc.search(cd.getCid()).getMobnum();
                String mail = cc.search(cd.getCid()).getEmail();
                String dates = cd.getRdate();
                String[] section = dates.split("-");
                String year = section[0];
                if (searchingYear.equals(year)) {
                    Object[] rows = {custname, moviename, cd.getMtime(), cd.getMdate(), cd.getRtime(), cd.getRdate(), cd.getSeatQ(), phonenumber, mail};
                    dtm.addRow(rows);
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
//     public void searchYearAndMonth(){
//             try {
//            CustomerController ccc=ServerConnector.getServerConnector().getCustomerController();
//            ReservationController rcc=ServerConnector.getServerConnector().getReservationController();
//            MovieController mcc=ServerConnector.getServerConnector().getMovieController();
//            List<CustomerDTO>customerlist=ccc.getAll();
//            List<ReservationDTO>reservationlist=rcc.getAll();
//            DefaultTableModel dtm=(DefaultTableModel)tblHistory.getModel();
//            dtm.setRowCount(0);
//            
//            String searchingYear=txtY.getText();
//            String searchingMonth=txtM.getText();
//            for(ReservationDTO cd:reservationlist){
//                String custname=ccc.search(cd.getCid()).getName();
//                String moviename=mcc.search(cd.getMoid()).getName();
//                String dates=cd.getRdate();
//                String [] section=dates.split("-");
//                String year=section[0];
//                String month=section[0+1];
//                System.out.println(section.length);
//                if(searchingYear.equals(year)||searchingMonth.equals(month)){
//                Object [] rows={custname,moviename,cd.getMtime(),cd.getMdate(),cd.getRtime(),cd.getRdate(),cd.getSeatQ()};
//                dtm.addRow(rows);
//                }else{
//                    System.out.println("Jump");
//                }
//            }
//        } catch (NotBoundException ex) {
//            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (MalformedURLException ex) {
//            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (RemoteException ex) {
//            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ParseException ex) {
//            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }catch(ArrayIndexOutOfBoundsException ex){
//              Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
//     }

    public void dateHistoryFinder() {
        try {
            CustomerController ccc = ServerConnector.getServerConnector().getCustomerController();
            ReservationController rcc = ServerConnector.getServerConnector().getReservationController();
            MovieController mcc = ServerConnector.getServerConnector().getMovieController();
            List<CustomerDTO> customerlist = ccc.getAll();
            List<ReservationDTO> reservationlist = rcc.getAll();
            DefaultTableModel dtm = (DefaultTableModel) tblHistory.getModel();
            dtm.setRowCount(0);

            String searchingDate = txtDate.getText();
            for (ReservationDTO cd : reservationlist) {
                String custname = ccc.search(cd.getCid()).getName();
                String moviename = mcc.search(cd.getMoid()).getName();
                int phonenumber = ccc.search(cd.getCid()).getMobnum();
                String mail = ccc.search(cd.getCid()).getEmail();
                String dates = cd.getRdate();

                if (searchingDate.equals(dates)) {
                    Object[] rows = {custname, moviename, cd.getMtime(), cd.getMdate(), cd.getRtime(), cd.getRdate(), cd.getSeatQ(), phonenumber, mail};
                    dtm.addRow(rows);
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void searchByName() {
        try {
            CustomerController ccc = ServerConnector.getServerConnector().getCustomerController();
            ReservationController rcc = ServerConnector.getServerConnector().getReservationController();
            MovieController mcc = ServerConnector.getServerConnector().getMovieController();
            List<CustomerDTO> customerlist = ccc.getAll();
            List<ReservationDTO> reservationlist = rcc.getAll();
            DefaultTableModel dtm = (DefaultTableModel) tblHistory.getModel();
            dtm.setRowCount(0);

            String searchingName = txtName.getText();
            for (ReservationDTO cd : reservationlist) {
                String custname = ccc.search(cd.getCid()).getName();
                String moviename = mcc.search(cd.getMoid()).getName();
                int phonenumber = ccc.search(cd.getCid()).getMobnum();
                String mail = ccc.search(cd.getCid()).getEmail();
                String dates = cd.getRdate();

                if (searchingName.equals(custname)) {
                    Object[] rows = {custname, moviename, cd.getMtime(), cd.getMdate(), cd.getRtime(), cd.getRdate(), cd.getSeatQ(), phonenumber, mail};
                    dtm.addRow(rows);
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            Logger.getLogger(HistoryWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
